
//// cactus version
params.cactus_version = "21.11.03"

params.init_version = "20.09.21"

cactus_version = params.cactus_version

//// analysis directories
params.cactusdir   =  "/home/jersal/lluis/atac"
params.toolsdir    = "${params.cactusdir}/tools"
params.srcdir      = "${params.cactusdir}/src/${cactus_version}"
params.rdir        = "${params.srcdir}/R_analysis"

params {
  //// output
  out_dir      =  "results/${cactus_version}"
	pub_mode = 'link'  
	
	//// allocated ressources 
	workMem     = '20G'
	nb_threads  = 6
	executor {
		queueSize = 50
		$local { 
      memory  = '100 GB' 
    }
	}

	//// tools
  picard_tools = "${params.toolsdir}/software/picard.jar"
  bowtie2_indexes_op50 = "${params.toolsdir}/op50_genome/bowtie2_op50_indexes" // this argument is C elegans specific (to check for contamination)
  skewer = "${params.toolsdir}/software/skewer/skewer-0.2.2-linux-x86_64"
  
}

// configuration files
includeConfig 'containers.config'
includeConfig 'genomes.config'
includeConfig "run_base.config"
// includeConfig "${PWD}/config/run_custom.config"
custom_config = "${PWD}/config/run_custom.config"
if(new File("${custom_config}").isFile()) includeConfig "${custom_config}"


//// genome
params{
  	bowtie2_indexes        = genomes[genome].bowtie2_indexes
  	chromosomes_sizes      = genomes[genome].chromosomes_sizes
  	effective_genome_size  = genomes[genome].effective_genome_size
  	kallisto_transcriptome = genomes[genome].kallisto_transcriptome
  	txdb                   = genomes[genome].txdb
  	df_genes_metadata      = genomes[genome].df_genes_metadata
  	df_genes_transcripts   = genomes[genome].df_genes_transcripts
  	promoters_df           = genomes[genome].promoters_df
  	promoters_bed          = genomes[genome].promoters_bed
  	blacklisted_regions    = genomes[genome].blacklisted_regions
  	org_db                 = genomes[genome].org_db
  	chromatin_state        = genomes[genome].chromatin_state
  	pwms_motifs            = genomes[genome].pwms_motifs
  	homer_genome           = genomes[genome].homer_genome
  	encode_chip            = genomes[genome].encode_chip
}


// tower token
tower {
	// accessToken = 'fd3114de75cc045443c804ffa7d7213e1fcf0c85' // KI
  accessToken = '3730e17fdb910dfab1b82c6b8217bdd43898e1f1' // hotmail
  enabled     = true
}

//// cache
resume = true
cache  = 'deep'

//// containers
singularity {
	enabled    = true
	autoMounts = false
  // runOptions = "--containall --cleanenv --home ${PWD} --workdir tmp -B ${params.cactusdir}"
  runOptions = "--containall --cleanenv --home ${PWD} --workdir ${params.cactusdir}/tmp1 -B ${params.cactusdir}"
	// runOptions = "--containall --cleanenv --home ${PWD} -B ${params.cactusdir}"
}

// NXF_SINGULARITY_CACHEDIR = "${params.cactusdir}/bin/containers_v2"
// System.getenv().put('NXF_SINGULARITY_CACHEDIR', '${params.cactusdir}/bin/containers_v2')
// System.getenv().put("NXF_SINGULARITY_CACHEDIR", "${params.cactusdir}/bin/containers_v2")
 // grep NXF_SINGULARITY_CACHEDIR nf_log.txt
 env {
   NXF_SINGULARITY_CACHEDIR = "${params.cactusdir}/bin/containers_v2"
 }


//// report files
import java.text.SimpleDateFormat
def date     = new Date()
sdf          = new SimpleDateFormat("MM-dd-yyyy_HH_mm_ss")
current_date = sdf.format(date)

timeline {
	enabled = true
	file    = "${params.out_dir}/Run_Info/${current_date}/timeline.html"
}

report {
	enabled = true
	file    = "${params.out_dir}/Run_Info/${current_date}/report.html"
}

dag {
	enabled = true
	file    = "${params.out_dir}/Run_Info/${current_date}/dag.html"
}




